openapi: 3.0.0
servers:
  - url: 'http://192.168.21.99:38083/abyss/oapi'
  - url: 'http://192.168.21.139:38083/abyss/oapi'
  - url: 'http://192.168.10.46:38083/abyss/oapi'
  - url: '/abyss/oapi'
info:
  description: 'Abyss platform APIs'
  version: '1.0.0'
  title: 'Abyss'
  termsOfService: 'https://apiportal.com/terms/'
  contact:
    email: 'info@apiportal.com'
    name: 'Abyss'
    url: 'https://apiportal.com'
  license:
    name: 'Abyss 1.0'
    url: 'https://apiportal.com/licenses/LICENSE-1.0.html'
tags:
  - name: Authentication
    externalDocs:
      url: 'https://apiportal.com'
      description: 'Find out more'
    description: 'Abyss plaftorm APIs : Authentication operations'
  - name: Signup
    externalDocs:
      url: 'https://apiportal.com'
      description: 'Find out more'
    description: 'Abyss plaftorm APIs : Signup operations'
  - name: Forgot Password
    externalDocs:
      url: 'https://apiportal.com'
      description: 'Find out more'
    description: 'Abyss plaftorm APIs : Forgot Password operations'
paths:
  /abyss-session:
    post:
      tags:
        - Authentication
      summary: 'Authenticate by username and password'
      description: 'Provide a platform user and password'
      operationId: login
      responses:
        '201':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      requestBody:
        $ref: '#/components/requestBodies/Credentials'
  /abyss-session/{sessionid}:
    delete:
      tags:
        - Authentication
      summary: 'Logout'
      description: 'Provide a sessionid parameter to logout'
      operationId: logout
      parameters:
        - name: sessionid
          in: path
          description: 'The session id'
          required: true
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
  /signup:
    post:
      tags:
        - Signup
      summary: 'User SignUp'
      description: 'SignUp to use the platform'
      operationId: signup
      responses:
        '201':
          $ref: '#/components/responses/201-SignUp'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      requestBody:
        $ref: '#/components/requestBodies/SignUpForm'
  /forgot-password:
    post:
      tags:
        - Forgot Password
      summary: 'User Forgot Password Request'
      description: 'SignUp to use the platform'
      operationId: forgotPassword
      responses:
        '200':
          $ref: '#/components/responses/200-Generic'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      requestBody:
        $ref: '#/components/requestBodies/ForgotPasswordForm'
  /reset-password:
    get:
      tags:
        - Forgot Password
      summary: 'User Reset Password Token Check'
      description: 'Checks Reset Password Token'
      operationId: checkResetPasswordToken
      parameters:
        - name: v
          in: query
          required: true
          schema:
            type: string
          description: Reset password token
      responses:
        '200':
          $ref: '#/components/responses/200-Generic'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
    post:
      tags:
        - Forgot Password
      summary: 'User Reset Password Request'
      description: 'Resets User Password to use the platform'
      operationId: resetPassword
      responses:
        '200':
          $ref: '#/components/responses/200-Generic'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      requestBody:
        $ref: '#/components/requestBodies/ResetPasswordForm'

externalDocs:
  description: 'See Abyss example'
  url: 'https://apiportal.com/apidocs/index.html'
components:
  schemas:
    Error:
      type: object
      required:
        - code
        - usermessage
      properties:
        code:
          type: integer
          format: int32
        usermessage:
          type: string
        internalmessage:
          type: string
        details:
          type: string
        recommendation:
          type: string
        moreinfo:
          type: string
          format: uri
    Credentials:
      type: object
      properties:
        username:
          type: string
          description: 'Abyss platform user name'
        password:
          type: string
          format: password
          writeOnly: true
          description: 'password'
        sessionid:
          type: string
          readOnly: true
          description: 'authenticated session id'
        principalid:
          type: string
          readOnly: true
          description: 'authenticated principal id'
    SignUpInfo:
      type: object
      properties:
        firstname:
          type: string
          description: 'Abyss platform first name'
        lastname:
          type: string
          description: 'Abyss platform last name'
        username:
          type: string
          description: 'Abyss platform user name'
        email:
          type: string
          description: 'Abyss platform email'
        password:
          type: string
          format: password
          writeOnly: true
          description: 'password'
        password2:
          type: string
          format: password
          writeOnly: true
          description: 'password2'
        isAgreedToTerms:
          type: boolean
          description: 'Is Agreed to Terms of Service of the Abyss Platform'
    ForgotPasswordInfo:
      type: object
      properties:
        username:
          type: string
          description: 'Abyss platform user name'
    ResetPasswordCheck:
      type: object
      properties:
        token:
          type: string
          description: 'Abyss platform reset password token'
    ResetPasswordInfo:
      type: object
      properties:
        token:
          type: string
          description: 'Abyss platform reset password token'
        newPassword:
          type: string
          format: password
          writeOnly: true
          description: 'new password'
        confirmPassword:
          type: string
          format: password
          writeOnly: true
          description: 'confirm password'
  requestBodies:
    Credentials:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Credentials'
      description: 'ResourceAccessToken object that needs to be added or updated'
      required: true
    SignUpForm:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignUpInfo'
      description: 'Sign Up request object'
      required: true
    ForgotPasswordForm:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ForgotPasswordInfo'
      description: 'Forgot Password request object'
      required: true
    ResetPasswordCheckForm:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResetPasswordCheck'
      description: 'Reset Password request object'
      required: true
    ResetPasswordForm:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResetPasswordInfo'
      description: 'Reset Password request object'
      required: true
  responses:
    '200':
      description: 'Successful operation'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Credentials'
    '200-Generic':
      description: 'Successful operation'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '201':
      description: 'New sessison has been created'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Credentials'
    '201-SignUp':
      description: 'Signup request has been created'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '204':
      description: 'The session was successfully deleted'
    '400':
      description: 'Invalid sessionid supplied'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '401':
      description: 'Authorization information is missing or invalid'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '403':
      description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '404':
      description: 'Not found – There is no resource behind the URI'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '405':
      description: 'Method not allowed'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '422':
      description: 'Unprocessable Entity – server cannot process the request'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '429':
      description: 'Too many request(rate limiting)'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '500':
      description: 'Internal server error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    default:
      description: 'error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  links: {}
  callbacks: {}
security: []
