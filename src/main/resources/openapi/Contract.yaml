openapi: 3.0.0
servers:
- url: 'http://192.168.21.99:38083/abyss/oapi'
- url: 'http://192.168.21.139:38083/abyss/oapi'
- url: 'http://192.168.10.46:38083/abyss/oapi'
- url: '/abyss/oapi'
info:
  description: 'Abyss platform APIs'
  version: '1.0.0'
  title: 'Abyss'
  termsOfService: 'https://apiportal.com/terms/'
  contact:
    email: 'info@apiportal.com'
    name: 'Abyss'
    url: 'https://apiportal.com'
  license:
    name: 'Abyss 1.0'
    url: 'https://apiportal.com/licenses/LICENSE-1.0.html'
tags:
- name: Contracts
  externalDocs:
    url: 'https://apiportal.com'
    description: 'Find out more'
  description: 'Abyss plaftorm APIs : Contracts crud operations'
- name: Contract
  externalDocs:
    url: 'https://apiportal.com'
    description: 'Find out more'
  description: 'Abyss plaftorm APIs : Contract crud operations'
- name: List-Contracts
  externalDocs:
    url: 'https://apiportal.com'
    description: 'Find out more'
  description: 'Abyss plaftorm APIs : Contracts listing operations'
paths:
  /contracts:
    get:
      tags:
      - Contracts
      summary: 'Get list of Contracts'
      description: 'Returns list of Contracts'
      operationId: getContracts
      parameters:
      - name: byname
        in: query
        required: false
        schema:
          type: string
        description: 'search Contracts which names exact match'
      - name: likename
        in: query
        required: false
        schema:
          type: string
        description: 'search Contracts which names begin with'
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          $ref: '#/components/responses/200-ListOfContract'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
    post:
      tags:
      - Contracts
      summary: 'Add a bulk of Contracts'
      description: 'Provide a list of Contracts to be inserted'
      operationId: addContracts
      responses:
        '207':
          $ref: '#/components/responses/207'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      requestBody:
        $ref: '#/components/requestBodies/ListOfContract'
    put:
      tags:
      - Contracts
      summary: 'Update a bulk of Contracts'
      description: 'Provide a bulk list of  Contracts to be updated'
      operationId: updateContracts
      responses:
        '207':
          $ref: '#/components/responses/207'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      requestBody:
        $ref: '#/components/requestBodies/ListOfContractObject'
    delete:
      tags:
      - Contracts
      summary: 'Delete all Contracts'
      description: 'Deletes all Contracts'
      operationId: deleteContracts
      responses:
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
  /contracts/{uuid}:
    get:
      tags:
      - Contract
      summary: 'Get an existing Contract by uuid'
      description: 'Provide an uuid of Contract to be get'
      operationId: getContract
      parameters:
      - name: uuid
        in: path
        description: 'uuid of Contract that need to be get'
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
    put:
      tags:
      - Contract
      summary: 'Update an existing Contract'
      description: 'Provide an altered Contract to be updated'
      operationId: updateContract
      parameters:
      - name: uuid
        in: path
        description: 'uuid of Contract that need to be updated'
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      requestBody:
        $ref: '#/components/requestBodies/Contract'
    delete:
      tags:
      - Contract
      summary: 'Delete Contract'
      description: 'Provide an uuid parameter of Contract to be updated'
      operationId: deleteContract
      parameters:
      - name: uuid
        in: path
        description: 'The uuid of Contract that needs to be deleted'
        required: true
        schema:
          type: string
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
  /contracts/api/{uuid}:
    get:
      tags:
      - List-Contracts
      summary: 'Get contract list of api'
      description: 'Returns contract list of api'
      operationId: getContractsOfApi
      parameters:
      - name: uuid
        in: path
        description: 'uuid of api'
        required: true
        schema:
          type: string
      - name: byname
        in: query
        required: false
        schema:
          type: string
        description: 'search api contracts which names exact match'
      - name: likename
        in: query
        required: false
        schema:
          type: string
        description: 'search api contracts which names begin with'
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          $ref: '#/components/responses/200-ListOfContract'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
  /contracts/app/{uuid}:
    get:
      tags:
      - List-Contracts
      summary: 'Get contract list of app'
      description: 'Returns contract list of app'
      operationId: getContractsOfApp
      parameters:
      - name: uuid
        in: path
        description: 'uuid of app'
        required: true
        schema:
          type: string
      - name: byname
        in: query
        required: false
        schema:
          type: string
        description: 'search app contracts which names exact match'
      - name: likename
        in: query
        required: false
        schema:
          type: string
        description: 'search app contracts which names begin with'
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          $ref: '#/components/responses/200-ListOfContract'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
  /contracts/license/{uuid}:
    get:
      tags:
      - List-Contracts
      summary: 'Get contract list of license'
      description: 'Returns contract list of license'
      operationId: getContractsOfLicense
      parameters:
      - name: uuid
        in: path
        description: 'uuid of license'
        required: true
        schema:
          type: string
      - name: byname
        in: query
        required: false
        schema:
          type: string
        description: 'search license''s contracts which names exact match'
      - name: likename
        in: query
        required: false
        schema:
          type: string
        description: 'search license''s contracts which names begin with'
      - $ref: '#/components/parameters/offsetParam'
      - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          $ref: '#/components/responses/200-ListOfContract'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
externalDocs:
  description: 'See Abyss example'
  url: 'https://apiportal.com/apidocs/index.html'
components:
  schemas:
    Error:
      type: object
      required:
      - code
      - usermessage
      properties:
        code:
          type: integer
          format: int32
        usermessage:
          type: string
        internalmessage:
          type: string
        details:
          type: string
        recommendation:
          type: string
        moreinfo:
          type: string
          format: uri
    MultiStatus:
      type: object
      required:
      - uuid
      properties:
        uuid:
          type: string
          readOnly: true
          description: 'uuid of the record'
        status:
          type: integer
          readOnly: true
          description: 'status -Http response code status (2XX, 3XX, 4XX, 5XX)'
        response:
          $ref: '#/components/schemas/Contract'
        error:
          $ref: '#/components/schemas/Error'
    Contract:
      type: object
      properties:
        uuid:
          type: string
          readOnly: true
          description: 'Secondary primary key. Used in front end messages for security reasons.'
        organizationid:
          type: string
          description: 'Id of Organization'
        created:
          type: string
          readOnly: true
          description: 'Timestamp of creation #readOnly#'
        updated:
          type: string
          readOnly: true
          description: 'Timestamp of update #readOnly#'
        deleted:
          type: string
          readOnly: true
          description: 'Timestamp of deletion #readOnly#'
        isdeleted:
          type: boolean
          readOnly: true
          description: 'Is record logically deleted #readOnly#'
        crudsubjectid:
          type: string
          description: 'ID of Subject that reads, creates, updates or deletes'
        name:
          type: string
          description: 'Name of contract'
        description:
          type: string
          description: 'The text description of the contract'
        apiid:
          type: string
          description: 'FK ID of API Version that this contract binds'
        subjectid:
          type: string
          description: 'FK ID of Subject / App that this contract binds'
        environment:
          type: string
          description: 'Environment that the contract relates to (Sandbox or Production).'
        contractstateid:
          type: string
          description: 'FK ID of the current state of the contract.

The state values for an API contract are

pending_approval
config_pending (used only in certain custom workflow scenarios or in LaaS integration)
approved
activated
rejected
resubmitted
suspended
cancelled'
        status:
          type: string
          description: 'The status of the contract.
draft - Indicates the contract has not yet been activated. workflow status of Pending Approval, Approved, and any other state before the contract is activated will have this status value.
inforce - Indicates that the contract is either Active or Suspended.
archived - Indicates that the active life of the contract is over. The workflow status of Cancelled, adn any other action that results in the cancellation of the contract (such as deletion of the app or API) will have this status value'
        isrestrictedtosubsetofapi:
          type: boolean
          description: 'Is app''s access to the API is restricted to a subset of the API'
        licenseid:
          type: string
          description: 'FK ID of license'
        subjectpermissionid:
          type: string
          description: 'FK ID of Subject Permission'
  requestBodies:
    Contract:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Contract'
      description: 'Contract object that needs to be added or updated'
      required: true
    ListOfContract:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Contract'
      description: 'Contract array that needs to be added'
      required: true
    ListOfContractObject:
      content:
        application/json:
          schema:
            type: object
            additionalProperties: true
      description:  'list of Contract objects that needs to be updated, each additional property name should be the uuid of coresponding Contract record'
      required: true
  responses:
    '200':
      description: 'Successful operation'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Contract'
    '200-ListOfContract':
      description: 'A Contract array'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Contract'
    '201':
      description: 'New Contract resource has been created'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Contract'
    '204':
      description: 'The Contract resource was successfully deleted'
    '207':
      description: 'Multi Status for bulk operation'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/MultiStatus'
    '304':
      description: 'Not Modified – The client can use cached data'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Contract'
    '400':
      description: 'Invalid UUID supplied'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '401':
      description: 'Authorization information is missing or invalid'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '403':
      description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '404':
      description: 'Not found – There is no resource behind the URI'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '405':
      description: 'Method not allowed'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '422':
      description: 'Unprocessable Entity – server cannot process the request'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '429':
      description: 'Too many request(rate limiting)'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '500':
      description: 'Internal server error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    default:
      description: 'error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  parameters:
    offsetParam:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
      description: 'The number of items to skip before starting to collect the result set'
    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 20
      description: 'The numbers of items to return'
  securitySchemes:
    abyssCookieAuth:
      $ref: '/openapi/AbyssSecuritySchemes.yaml#/securitySchemes/abyssCookieAuth'
    abyssHttpBasicAuth:
      $ref: '/openapi/AbyssSecuritySchemes.yaml#/securitySchemes/abyssHttpBasicAuth'
    abyssApiKeyAuth:
      $ref: '/openapi/AbyssSecuritySchemes.yaml#/securitySchemes/abyssApiKeyAuth'
    abyssJWTBearerAuth:
      $ref: '/openapi/AbyssSecuritySchemes.yaml#/securitySchemes/abyssJWTBearerAuth'
    abyssAppAccessTokenAuth:
      $ref: '/openapi/AbyssSecuritySchemes.yaml#/securitySchemes/abyssAppKeyAuth'
    abyssAppAccessTokenCookieAuth:
      $ref: '/openapi/AbyssSecuritySchemes.yaml#/securitySchemes/abyssAppKeyCookieAuth'
  links: {}
  callbacks: {}
security:
- abyssCookieAuth: []
- abyssHttpBasicAuth: []
- abyssApiKeyAuth: []
- abyssJWTBearerAuth: []
- abyssAppAccessTokenAuth: []
- abyssAppAccessTokenCookieAuth: []
