openapi: 3.0.0
servers:
  - url: 'http://192.168.21.99:38081/abyss'
  - url: 'http://192.168.10.46:38081/abyss' 
  - url: 'https://apiportal.com/abyss'
info:
  description: Abyss platform APIs
  version: 1.0.0
  title: Abyss
  termsOfService: 'https://apiportal.com/terms/'
  contact:
    email: info@apiportal.com
    name: Abyss
    url: 'https://apiportal.com'
  license:
    name: Abyss 1.0
    url: 'https://apiportal.com/licenses/LICENSE-1.0.html'
tags:
  - name: TODO
    externalDocs:
      url: 'https://apiportal.com'
      description: Find out more
    description: Abyss ... [TODO]  
paths:
  /api-groups:
    get:
      tags:
        - TODO
      summary: Get list of apiGroups
      description: 'Returns list of apiGroups'
      operationId: getApiGroups
      responses:
        '200':
          $ref: '#/components/responses/200-ListOfApiGroup'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      security: []
    post:
      tags:
        - TODO
      summary: Add a new ApiGroup
      description: 'Provide a new ApiGroup to be inserted'
      operationId: addApiGroups
      responses:
        '201':
          $ref: '#/components/responses/201'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      security: []
      requestBody:
        $ref: '#/components/requestBodies/ApiGroup'
    put:
      tags:
        - TODO
      summary: Update a bulk of ApiGroup
      description: 'Provide an altered ApiGroup array to be updated'
      operationId: updateApiGroups
      parameters:
        - name: uuid
          in: path
          description: bulk of uuids of apiGroups that need to be updated
          required: true
          schema:
            type: array
            items:
              type: string
              format: uuid          
      responses:
        '200':
          $ref: '#/components/responses/200-ListOfApiGroup'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      security: []
      requestBody:
        $ref: '#/components/requestBodies/ListOfApiGroup'          
    delete:
      tags:
        - TODO
      summary: Delete all apiGroups
      description: 'Deletes all apiGroups'
      operationId: deleteApiGroups
      responses:
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      security: []
  /api-groups/{uuid}:
    get:
      tags:
        - TODO
      summary: Get an existing ApiGroup by uuid
      description: 'Provide an uuid of ApiGroup to be get'
      operationId: getApiGroup
      parameters:
        - name: uuid
          in: path
          description: uuid of ApiGroup that need to be get
          required: true
          schema:
            type: string
            format: uuid          
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      security: []
    put:
      tags:
        - TODO
      summary: Update an existing ApiGroup
      description: 'Provide an altered ApiGroup to be updated'
      operationId: updateApiGroup
      parameters:
        - name: uuid
          in: path
          description: uuid of ApiGroup that need to be updated
          required: true
          schema:
            type: string
            format: uuid          
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      security: []
      requestBody:
        $ref: '#/components/requestBodies/ApiGroup'
    delete:
      tags:
        - TODO
      summary: Delete ApiGroup
      description: 'Provide an uuid parameter of ApiGroup to be updated'
      operationId: deleteApiGroup
      parameters:
        - name: uuid
          in: path
          description: The uuid of ApiGroup that needs to be deleted
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      security: []
externalDocs:
  description: See Abyss example
  url: 'https://apiportal.com/apidocs/index.html'
components:
  schemas:
    Error:
      type: object
      required:
        - code
        - usermessage
      properties:
        code:
          type: integer
          format: int32
        usermessage:
          type: string
        internalmessage:
          type: string
        details:
          type: string
        recommendation:
          type: string
        moreinfo:
          type: string
          format: uri
    ApiGroup:
      type: object
      properties:
        uuid:
          type: string
          readOnly: true
          description: Secondary primary key. Used in front end messages for security reasons.
        organizationId:
          type: integer
          format: int32
          description: Id of Organization
        created:
          type: string
          description: Timestamp of creation
        updated:
          type: string
          description: Timestamp of update
        deleted:
          type: string
          description: Timestamp of deletion
        isDeleted:
          type: boolean
          description: Is record logically deleted
        crudSubjectId:
          type: integer
          format: int32
          description: ID of Subject that reads, creates, updates or deletes
        subjectId:
          type: integer
          format: int32
          description: FK ID of Subject Owning the API Group
        name:
          type: string
          description: Name of tag
        description:
          type: string
          description: Description of group
  requestBodies:
    ApiGroup:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiGroup'          
      description: ApiGroup object that needs to be added
      required: true
    ListOfApiGroup:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ApiGroup'          
      description: ApiGroup array that needs to be added
      required: true
  responses:
    '200':
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiGroup'
    '200-ListOfApiGroup':
      description: A ApiGroup array
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ApiGroup'          
            
    '201':
      description: New ApiGroup resource has been created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiGroup'
    '204':
      description: The ApiGroup resource was successfully deleted
    '304':
      description: Not Modified â€“ The client can use cached data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiGroup'
    '400':
      description: Invalid UUID supplied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '401':
      description: Authorization information is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '403':
      description: Forbidden â€“ The server understood the request, but is refusing it or the access is not allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '404':
      description: Not found â€“ There is no resource behind the URI
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '405':
      description: Method not allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '422':
      description: Unprocessable Entity â€“ server cannot process the request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '429':
      description: Too many request(rate limiting)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    default:
      description: error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    cookieAuth:
      type: apiKey
      name: abyss.session
      in: cookie
  links: {}
  callbacks: {}
security:
  - cookieAuth: []
