openapi: 3.0.0
servers:
  - url: 'http://192.168.21.99:38083/abyss/oapi'
  - url: 'http://192.168.21.139:38083/abyss/oapi'
  - url: 'http://192.168.10.46:38083/abyss/oapi'
  - url: '/abyss/oapi'
info:
  description: 'Abyss platform APIs'
  version: '1.0.0'
  title: 'Abyss'
  termsOfService: 'https://apiportal.com/terms/'
  contact:
    email: 'info@apiportal.com'
    name: 'Abyss'
    url: 'https://apiportal.com'
  license:
    name: 'Abyss 1.0'
    url: 'https://apiportal.com/licenses/LICENSE-1.0.html'
tags:
  - name: Licenses
    externalDocs:
      url: 'https://apiportal.com'
      description: 'Find out more'
    description: 'Abyss plaftorm APIs : Licenses crud operations'
  - name: License
    externalDocs:
      url: 'https://apiportal.com'
      description: 'Find out more'
    description: 'Abyss plaftorm APIs : License crud operations'
  - name: Subject Licenses
    externalDocs:
      url: 'https://apiportal.com'
      description: 'Find out more'
    description: 'Abyss plaftorm APIs : Subject''s Licenses crud operations'
paths:
  /licenses:
    get:
      tags:
        - Licenses
      summary: 'Get list of Licenses'
      description: 'Returns list of Licenses'
      operationId: getLicenses
      parameters:
        - name: byname
          in: query
          required: false
          schema:
            type: string
          description: 'search Licenses which names exact match'
        - name: likename
          in: query
          required: false
          schema:
            type: string
          description: 'search Licenses which names begin with'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          $ref: '#/components/responses/200-ListOfLicense'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
    post:
      tags:
        - Licenses
      summary: 'Add a bulk of Licenses'
      description: 'Provide a list of Licenses to be inserted'
      operationId: addLicenses
      responses:
        '207':
          $ref: '#/components/responses/207'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      requestBody:
        $ref: '#/components/requestBodies/ListOfLicense'
    put:
      tags:
        - Licenses
      summary: 'Update a bulk of Licenses'
      description: 'Provide a bulk list of  Licenses to be updated'
      operationId: updateLicenses
      responses:
        '207':
          $ref: '#/components/responses/207'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      requestBody:
        $ref: '#/components/requestBodies/ListOfLicenseObject'
    delete:
      tags:
        - Licenses
      summary: 'Delete all Licenses'
      description: 'Deletes all Licenses'
      operationId: deleteLicenses
      responses:
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
  /licenses/{uuid}:
    get:
      tags:
        - License
      summary: 'Get an existing License by uuid'
      description: 'Provide an uuid of License to be get'
      operationId: getLicense
      parameters:
        - name: uuid
          in: path
          description: 'uuid of License that need to be get'
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
    put:
      tags:
        - License
      summary: 'Update an existing License'
      description: 'Provide an altered License to be updated'
      operationId: updateLicense
      parameters:
        - name: uuid
          in: path
          description: 'uuid of License that need to be updated'
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      requestBody:
        $ref: '#/components/requestBodies/License'
    delete:
      tags:
        - License
      summary: 'Delete License'
      description: 'Provide an uuid parameter of License to be updated'
      operationId: deleteLicense
      parameters:
        - name: uuid
          in: path
          description: 'The uuid of License that needs to be deleted'
          required: true
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
  /licenses/subject/{uuid}:
    parameters:
      - name: uuid
        in: path
        description: 'uuid of Subject'
        required: true
        schema:
          type: string
    get:
      tags:
        - Subject Licenses
      summary: 'Get list of Subject''s Licenses'
      description: 'Returns list of Subject''s Licenses'
      operationId: getLicensesOfSubject
      parameters:
        - name: byname
          in: query
          required: false
          schema:
            type: string
          description: 'search Subject''s Licenses which names exact match'
        - name: likename
          in: query
          required: false
          schema:
            type: string
          description: 'search Subject''s Licenses which names begin with'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          $ref: '#/components/responses/200-ListOfLicense'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
    post:
      tags:
        - Subject Licenses
      summary: 'Add a bulk of Subject''s Licenses'
      description: 'Provide a list of Subject''s Licenses to be inserted'
      operationId: addLicensesOfSubject
      responses:
        '207':
          $ref: '#/components/responses/207'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      requestBody:
        $ref: '#/components/requestBodies/ListOfLicense'
    put:
      tags:
        - Subject Licenses
      summary: 'Update a bulk of Subject''s Licenses'
      description: 'Provide a bulk list of Subject''s Licenses to be updated'
      operationId: updateLicensesOfSubject
      responses:
        '207':
          $ref: '#/components/responses/207'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      requestBody:
        $ref: '#/components/requestBodies/ListOfLicenseObject'
    delete:
      tags:
        - Subject Licenses
      summary: 'Delete all Subject''s Licenses'
      description: 'Deletes all Subject''s Licenses'
      operationId: deleteLicensesOfSubject
      responses:
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
  /licenses/api/{uuid}:
    parameters:
      - name: uuid
        in: path
        description: 'uuid of Api'
        required: true
        schema:
          type: string
    get:
      tags:
        - API Licenses
      summary: 'Get list of Api''s Licenses'
      description: 'Returns list of Api''s Licenses'
      operationId: getLicensesOfApi
      responses:
        '200':
          $ref: '#/components/responses/200-ListOfLicense'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
  /licenses/inuse/api/{uuid}:
    parameters:
      - name: uuid
        in: path
        description: 'uuid of Api'
        required: true
        schema:
          type: string
    get:
      tags:
        - API Licenses
      summary: 'Get list of Api''s Licenses in Use'
      description: 'Returns list of Api''s Licenses in Use'
      operationId: getLicensesOfApiInUse
      responses:
        '200':
          $ref: '#/components/responses/200-ListOfLicense'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
externalDocs:
  description: 'See Abyss example'
  url: 'https://apiportal.com/apidocs/index.html'
components:
  schemas:
    Error:
      type: object
      required:
        - code
        - usermessage
      properties:
        code:
          type: integer
          format: int32
        usermessage:
          type: string
        internalmessage:
          type: string
        details:
          type: string
        recommendation:
          type: string
        moreinfo:
          type: string
          format: uri
    MultiStatus:
      type: object
      required:
        - uuid
      properties:
        uuid:
          type: string
          readOnly: true
          description: 'uuid of the record'
        status:
          type: integer
          readOnly: true
          description: 'status -Http response code status (2XX, 3XX, 4XX, 5XX)'
        response:
          $ref: '#/components/schemas/License'
        error:
          $ref: '#/components/schemas/Error'
    License:
      type: object
      properties:
        uuid:
          type: string
          readOnly: true
          description: 'Secondary primary key. Used in front end messages for security reasons.'
        organizationid:
          type: string
          description: 'Id of Organization'
        created:
          type: string
          readOnly: true
          description: 'Timestamp of creation #readOnly#'
        updated:
          type: string
          readOnly: true
          description: 'Timestamp of update #readOnly#'
        deleted:
          type: string
          readOnly: true
          description: 'Timestamp of deletion #readOnly#'
        isdeleted:
          type: boolean
          readOnly: true
          description: 'Is record logically deleted #readOnly#'
        crudsubjectid:
          type: string
          description: 'ID of Subject that reads, creates, updates or deletes'
        name:
          type: string
          description: 'Name of License'
        version:
          type: string
          description: 'Version of license'
        subjectid:
          type: string
          description: 'FK ID of owing Subject'
        licensedocument:
          type: object
          description: 'License of contract. A license is a tailored API access package designed by the Business Admin/API Admin and offered to the app developer. A license includes one or more license terms, each of which can include multiple scopes, giving access to specifically designated operations, and multiple quality of service (QoS) policies, and also one or more legal agreements applicable to the license.
Terms of Service - QoS, SLA
Legal'
        isactive:
          type: boolean
          description: 'Is the license active or not'
  requestBodies:
    License:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/License'
      description: 'License object that needs to be added or updated'
      required: true
    ListOfLicense:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/License'
      description: 'License array that needs to be added'
      required: true
    ListOfLicenseObject:
      content:
        application/json:
          schema:
            type: object
            additionalProperties: true
      description:  'list of License objects that needs to be updated, each additional property name should be the uuid of coresponding License record'
      required: true
  responses:
    '200':
      description: 'Successful operation'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/License'
    '200-ListOfLicense':
      description: 'A License array'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/License'
    '201':
      description: 'New License resource has been created'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/License'
    '204':
      description: 'The License resource was successfully deleted'
    '207':
      description: 'Multi Status for bulk operation'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/MultiStatus'
    '304':
      description: 'Not Modified – The client can use cached data'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/License'
    '400':
      description: 'Invalid UUID supplied'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '401':
      description: 'Authorization information is missing or invalid'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '403':
      description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '404':
      description: 'Not found – There is no resource behind the URI'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '405':
      description: 'Method not allowed'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '422':
      description: 'Unprocessable Entity – server cannot process the request'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '429':
      description: 'Too many request(rate limiting)'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '500':
      description: 'Internal server error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    default:
      description: 'error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  parameters:
    offsetParam:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
      description: 'The number of items to skip before starting to collect the result set'
    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 20
      description: 'The numbers of items to return'
  securitySchemes:
    abyssCookieAuth:
      $ref: '/openapi/AbyssSecuritySchemes.yaml#/securitySchemes/abyssCookieAuth'
    abyssHttpBasicAuth:
      $ref: '/openapi/AbyssSecuritySchemes.yaml#/securitySchemes/abyssHttpBasicAuth'
    abyssApiKeyAuth:
      $ref: '/openapi/AbyssSecuritySchemes.yaml#/securitySchemes/abyssApiKeyAuth'
    abyssJWTBearerAuth:
      $ref: '/openapi/AbyssSecuritySchemes.yaml#/securitySchemes/abyssJWTBearerAuth'
    abyssAppAccessTokenAuth:
      $ref: '/openapi/AbyssSecuritySchemes.yaml#/securitySchemes/abyssAppKeyAuth'
    abyssAppAccessTokenCookieAuth:
      $ref: '/openapi/AbyssSecuritySchemes.yaml#/securitySchemes/abyssAppKeyCookieAuth'
  links: {}
  callbacks: {}
security:
  - abyssCookieAuth: []
  - abyssHttpBasicAuth: []
  - abyssApiKeyAuth: []
  - abyssJWTBearerAuth: []
  - abyssAppAccessTokenAuth: []
  - abyssAppAccessTokenCookieAuth: []