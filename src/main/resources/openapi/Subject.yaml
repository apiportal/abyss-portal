openapi: 3.0.0
servers:
  - url: 'http://192.168.21.99:38083/abyss/oapi'
  - url: 'http://192.168.21.139:38083/abyss/oapi'
  - url: 'http://192.168.10.46:38083/abyss/oapi'
  - url: '/abyss/oapi'
info:
  description: 'Abyss platform APIs'
  version: '1.0.1'
  title: 'Abyss'
  termsOfService: 'https://apiportal.com/terms/'
  contact:
    email: 'info@apiportal.com'
    name: 'Abyss'
    url: 'https://apiportal.com'
  license:
    name: 'Abyss 1.0'
    url: 'https://apiportal.com/licenses/LICENSE-1.0.html'
tags:
  - name: Subjects
    externalDocs:
      url: 'https://apiportal.com'
      description: 'Find out more'
    description: 'Abyss plaftorm APIs : Subjects crud operations'
  - name: Subject
    externalDocs:
      url: 'https://apiportal.com'
      description: 'Find out more'
    description: 'Abyss plaftorm APIs : Subject crud operations'
  - name: APPS
    externalDocs:
      url: 'https://apiportal.com'
      description: 'Find out more'
    description: 'Abyss plaftorm APIs : APPs crud operations'
  - name: USERS
    externalDocs:
      url: 'https://apiportal.com'
      description: 'Find out more'
    description: 'Abyss plaftorm APIs : Users crud operations'
  - name: GROUPS
    externalDocs:
      url: 'https://apiportal.com'
      description: 'Find out more'
    description: 'Abyss plaftorm APIs : Groups crud operations'
  - name: ROLES
    externalDocs:
      url: 'https://apiportal.com'
      description: Find out more
    description: 'Abyss plaftorm APIs : Roles crud operations'
  - name: DIRECTORY FILTERED
    externalDocs:
      url: 'https://apiportal.com'
      description: 'Find out more'
    description: 'Abyss plaftorm APIs : Users and Groups under Directory'
  - name: USERSwithGROUPS
    externalDocs:
      url: 'https://apiportal.com'
      description: 'Find out more'
    description: 'Abyss plaftorm APIs : Users with Groups Composite GET operations'
  - name: USERwithGROUPS
    externalDocs:
      url: 'https://apiportal.com'
      description: 'Find out more'
    description: 'Abyss plaftorm APIs : User with Groups Composite GET operations'
  - name: Password Management
    externalDocs:
      url: 'https://apiportal.com'
      description: 'Find out more'
    description: 'Abyss plaftorm APIs : Password Management crud operations'
paths:
  /subjects:
    get:
      tags:
        - Subjects
      summary: 'Get list of Subjects'
      description: 'Returns list of Subjects'
      operationId: getSubjects
      parameters:
        - name: byname
          in: query
          required: false
          schema:
            type: string
          description: 'search Subjects which names exact match'
        - name: likename
          in: query
          required: false
          schema:
            type: string
          description: 'search Subjects which names begin with'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          $ref: '#/components/responses/200-ListOfSubject'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
    post:
      tags:
        - Subjects
      summary: 'Add a bulk of Subjects'
      description: 'Provide a list of Subjects to be inserted'
      operationId: addSubjects
      responses:
        '207':
          $ref: '#/components/responses/207'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      requestBody:
        $ref: '#/components/requestBodies/ListOfSubject'
      parameters: []
    put:
      tags:
        - Subjects
      summary: 'Update a bulk of Subjects'
      description: 'Provide a bulk list of  Subjects to be updated'
      operationId: updateSubjects
      responses:
        '207':
          $ref: '#/components/responses/207'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      requestBody:
        $ref: '#/components/requestBodies/ListOfSubjectObject'
      parameters: []
    delete:
      tags:
        - Subjects
      summary: 'Delete all Subjects'
      description: 'Deletes all Subjects'
      operationId: deleteSubjects
      responses:
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      parameters: []
  '/subjects/{uuid}':
    get:
      tags:
        - Subject
      summary: 'Get an existing Subject by uuid'
      description: 'Provide an uuid of Subject to be get'
      operationId: getSubject
      parameters:
        - name: uuid
          in: path
          description: 'uuid of Subject that need to be get'
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
    put:
      tags:
        - Subject
      summary: 'Update an existing Subject'
      description: 'Provide an altered Subject to be updated'
      operationId: updateSubject
      parameters:
        - name: uuid
          in: path
          description: 'uuid of Subject that need to be updated'
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      requestBody:
        $ref: '#/components/requestBodies/Subject'
    delete:
      tags:
        - Subject
      summary: 'Delete Subject'
      description: 'Provide an uuid parameter of Subject to be updated'
      operationId: deleteSubject
      parameters:
        - name: uuid
          in: path
          description: 'The uuid of Subject that needs to be deleted'
          required: true
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
  /subjects/apps/:
    get:
      tags:
        - APPS
      summary: 'Get list of APPs'
      description: 'Returns list of APPs'
      operationId: getApps
      parameters:
        - name: byname
          in: query
          required: false
          schema:
            type: string
          description: 'search APPs which names exact match'
        - name: likename
          in: query
          required: false
          schema:
            type: string
          description: 'search APPs which names begin with'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          $ref: '#/components/responses/200-ListOfSubject'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
    post:
      tags:
        - APPS
      summary: 'Add a bulk of APPs'
      description: 'Provide a list of APPs to be inserted'
      operationId: addApps
      responses:
        '207':
          $ref: '#/components/responses/207'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      requestBody:
        $ref: '#/components/requestBodies/ListOfSubject'
      parameters: []
    put:
      tags:
        - APPS
      summary: 'Update a bulk of APPs'
      description: 'Provide a bulk list of APPs to be updated'
      operationId: updateApps
      responses:
        '207':
          $ref: '#/components/responses/207'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      requestBody:
        $ref: '#/components/requestBodies/ListOfSubjectObject'
      parameters: []
    delete:
      tags:
        - APPS
      summary: 'Delete all APPs'
      description: 'Deletes all APPs'
      operationId: deleteApps
      responses:
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
  /subjects/apps/cascaded:
    post:
      tags:
        - APPS CASCADED
      summary: 'Add a bulk of APPs cascaded'
      description: 'Provide a list of APPs to be inserted cascaded'
      operationId: addAppsCascaded
      responses:
        '207':
          $ref: '#/components/responses/207'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      requestBody:
        $ref: '#/components/requestBodies/ListOfSubject'
      parameters: []
    put:
      tags:
        - APPS CASCADED
      summary: 'Update a bulk of APPs cascaded'
      description: 'Provide a bulk list of APPs to be updated cascaded'
      operationId: updateAppsCascaded
      responses:
        '207':
          $ref: '#/components/responses/207'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      requestBody:
        $ref: '#/components/requestBodies/ListOfSubjectObject'
      parameters: []
    delete:
      tags:
        - APPS CASCADED
      summary: 'Delete all APPs cascaded'
      description: 'Deletes all APPs cascaded'
      operationId: deleteAppsCascaded
      responses:
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      requestBody:
        $ref: '#/components/requestBodies/ListOfSubjectObject'
      parameters: []
  /subjects/apps/user/{uuid}:
    parameters:
      - name: uuid
        in: path
        description: 'uuid of User that owns Apps'
        required: true
        schema:
          type: string
    get:
      tags:
        - APPS OF USER
      summary: 'Get list of APPs of user'
      description: 'Returns list of APPs of user'
      operationId: getAppsOfUser
      parameters:
        - name: byname
          in: query
          required: false
          schema:
            type: string
          description: 'search APPs which names exact match'
        - name: likename
          in: query
          required: false
          schema:
            type: string
          description: 'search APPs which names begin with'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          $ref: '#/components/responses/200-AppWithContracts'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
  /subjects/users/:
    get:
      tags:
        - USERS
      summary: 'Get list of users'
      description: 'Returns list of users'
      operationId: getUsers
      parameters:
        - name: byname
          in: query
          required: false
          schema:
            type: string
          description: 'search users which names exact match'
        - name: likename
          in: query
          required: false
          schema:
            type: string
          description: 'search users which names begin with'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          $ref: '#/components/responses/200-ListOfSubject'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
    post:
      tags:
        - USERS
      summary: 'Add a bulk of users'
      description: 'Provide a list of users to be inserted'
      operationId: addUsers
      responses:
        '207':
          $ref: '#/components/responses/207'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      requestBody:
        $ref: '#/components/requestBodies/ListOfSubject'
      parameters: []
    put:
      tags:
        - USERS
      summary: 'Update a bulk of users'
      description: 'Provide a bulk list of users to be updated'
      operationId: updateUsers
      responses:
        '207':
          $ref: '#/components/responses/207'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      requestBody:
        $ref: '#/components/requestBodies/ListOfSubjectObject'
      parameters: []
    delete:
      tags:
        - USERS
      summary: 'Delete all users'
      description: 'Deletes all users'
      operationId: deleteUsers
      responses:
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
  /subjects/users/current-user:
    get:
      tags:
        - USERS
      summary: 'Get current user'
      description: 'Returns info of current user'
      operationId: getCurrentUser
      responses:
        '200':

          $ref: '#/components/responses/200-UserWithOrganizations'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
  '/subjects/users/subject-directory/{uuid}':
    get:
      tags:
        - DIRECTORY FILTERED
      summary: Get list of users under given user directory
      description: Returns list of users under given user directory
      operationId: getUsersUnderDirectory
      parameters:
        - name: byname
          in: query
          required: false
          schema:
            type: string
          description: search users which names exact match
        - name: likename
          in: query
          required: false
          schema:
            type: string
          description: search users which names begin with
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - name: uuid
          in: path
          description: 'uuid of User Directory filtering users'
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/200-ListOfSubject'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
  /subjects/groups/:
    get:
      tags:
        - GROUPS
      summary: 'Get list of groups'
      description: 'Returns list of groups'
      operationId: getGroups
      parameters:
        - name: byname
          in: query
          required: false
          schema:
            type: string
          description: 'search groups which names exact match'
        - name: likename
          in: query
          required: false
          schema:
            type: string
          description: 'search groups which names begin with'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          $ref: '#/components/responses/200-ListOfSubject'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
    post:
      tags:
        - GROUPS
      summary: 'Add a bulk of groups'
      description: 'Provide a list of groups to be inserted'
      operationId: addGroups
      responses:
        '207':
          $ref: '#/components/responses/207'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      requestBody:
        $ref: '#/components/requestBodies/ListOfSubject'
      parameters: []
    put:
      tags:
        - GROUPS
      summary: 'Update a bulk of groups'
      description: 'Provide a bulk list of groups to be updated'
      operationId: updateGroups
      responses:
        '207':
          $ref: '#/components/responses/207'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      requestBody:
        $ref: '#/components/requestBodies/ListOfSubjectObject'
      parameters: []
    delete:
      tags:
        - GROUPS
      summary: 'Delete all groups'
      description: 'Deletes all groups'
      operationId: deleteGroups
      responses:
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      parameters: []
  /subjects/roles/:
    get:
      tags:
        - ROLES
      summary: Get list of roles
      description: Returns list of roles
      operationId: getRoles
      parameters:
        - name: byname
          in: query
          required: false
          schema:
            type: string
          description: search roles which names exact match
        - name: likename
          in: query
          required: false
          schema:
            type: string
          description: search roles which names begin with
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          $ref: '#/components/responses/200-ListOfSubject'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
    post:
      tags:
        - ROLES
      summary: Add a bulk of roles
      description: Provide a list of roles to be inserted
      operationId: addRoles
      responses:
        '207':
          $ref: '#/components/responses/207'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      requestBody:
        $ref: '#/components/requestBodies/ListOfSubject'
      parameters: []
    put:
      tags:
        - ROLES
      summary: Update a bulk of roles
      description: Provide a bulk list of roles to be updated
      operationId: updateRoles
      responses:
        '207':
          $ref: '#/components/responses/207'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      requestBody:
        $ref: '#/components/requestBodies/ListOfSubjectObject'
      parameters: []
    delete:
      tags:
        - ROLES
      summary: Delete all roles
      description: Deletes all roles
      operationId: deleteRoles
      responses:
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      parameters: []
  '/subjects/groups/subject-directory/{uuid}':
    get:
      tags:
        - DIRECTORY FILTERED
      summary: Get list of groups under given user directory
      description: Returns list of groups under given user directory
      operationId: getGroupsUnderDirectory
      parameters:
        - name: byname
          in: query
          required: false
          schema:
            type: string
          description: search groups which names exact match
        - name: likename
          in: query
          required: false
          schema:
            type: string
          description: search groups which names begin with
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - name: uuid
          in: path
          description: 'uuid of User Directory filtering groups'
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/200-ListOfSubject'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
  '/subjects/users/with-groups/':
    get:
      tags:
        - USERSwithGROUPS
      summary: 'Get list of users with groups'
      description: 'Returns list of users with groups'
      operationId: getUsersWithGroups
      parameters:
        - name: byname
          in: query
          required: false
          schema:
            type: string
          description: 'search users which names exact match'
        - name: likename
          in: query
          required: false
          schema:
            type: string
          description: 'search users which names begin with'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          $ref: '#/components/responses/200-ListOfSubjectWithGroups'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
  '/subjects/users/{uuid}/with-groups-and-permissions/':
    get:
      tags:
        - USERwithGROUPS
      summary: 'Get user with groups and permissions'
      description: 'Returns user with groups and permissions'
      operationId: getUserWithGroupsAndPermissions
      parameters:
        - name: uuid
          in: path
          description: 'uuid of Subject that need to be get'
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/200-SubjectWithGroupAndPermission'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
  /subjects/{uuid}/changepassword/:
    put:
      tags:
        - Password Management
      summary: 'Update an existing Subject''s password'
      description: 'Provide old and new passwords to be updated'
      operationId: updatePasswordOfSubject
      parameters:
        - name: uuid
          in: path
          description: 'uuid of Subject that need to be changed its password'
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/200'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '422':
          $ref: '#/components/responses/422'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        default:
          $ref: '#/components/responses/default'
      requestBody:
        $ref: '#/components/requestBodies/SubjectChangePassword'
externalDocs:
  description: 'See Abyss example'
  url: 'https://apiportal.com/apidocs/index.html'
components:
  schemas:
    Error:
      type: object
      required:
        - code
        - usermessage
      properties:
        code:
          type: integer
          format: int32
        usermessage:
          type: string
        internalmessage:
          type: string
        details:
          type: string
        recommendation:
          type: string
        moreinfo:
          type: string
          format: uri
    MultiStatus:
      type: object
      required:
        - uuid
      properties:
        uuid:
          type: string
          readOnly: true
          description: 'uuid of the record'
        status:
          type: integer
          readOnly: true
          description: 'status -Http response code status (2XX, 3XX, 4XX, 5XX)'
        response:
          $ref: '#/components/schemas/Subject'
        error:
          $ref: '#/components/schemas/Error'
    Subject:
      type: object
      properties:
        uuid:
          type: string
          readOnly: true
          description: 'Secondary primary key. Used in front end messages for security reasons.'
        organizationid:
          type: string
          description: 'FK ID of Organization'
        created:
          type: string
          readOnly: true
          description: 'Timestamp of creation #readOnly#'
        updated:
          type: string
          readOnly: true
          description: 'Timestamp of update #readOnly#'
        deleted:
          type: string
          readOnly: true
          description: 'Timestamp of deletion #readOnly#'
        isdeleted:
          type: boolean
          readOnly: true
          description: 'Is record logically deleted #readOnly#'
        crudsubjectid:
          type: string
          description: 'ID of Subject that reads, creates, updates or deletes'
        isactivated:
          type: boolean
          readOnly: true
          description: 'Is user activated after signup by validating secondary verification mechanism #readOnly#'
        subjecttypeid:
          type: string
          description: 'Id of Subject Type'
        subjectname:
          type: string
          description: 'Username of user that is going to be used as credential'
        firstname:
          type: string
          description: 'First name of user'
        lastname:
          type: string
          description: 'Surname of user'
        displayname:
          type: string
          description: 'Display name or alias of user'
        email:
          type: string
          format: email
          description: 'Main contact email of user #email#'
        secondaryemail:
          type: string
          format: email
          description: 'Secondary email of user for recovering account etc. #email#'
        effectivestartdate:
          type: string
          description: 'Effective start date time of user that he or she can start using the platform'
        effectiveenddate:
          type: string
          description: 'Effective end date time of user that he or she can use the platform until'
        password:
          type: string
          format: password
          writeOnly: true
          description: 'Password of user that is going to be used as credential #Level:1# #writeOnly#'
        picture:
          type: string
          format: byte
          description: 'Picture of subject #base64#'
        totallogincount:
          type: integer
          format: int32
          readOnly: true
          description: 'Total Login Count of Subject #readOnly#'
        failedlogincount:
          type: integer
          format: int32
          readOnly: true
          description: 'Failed Login Count of Subject #readOnly#'
        invalidpasswordattemptcount:
          type: integer
          format: int32
          readOnly: true
          description: 'Invalid Password Attempt Count of Subject #readOnly#'
        ispasswordchangerequired:
          type: boolean
          readOnly: true
          description: 'Does subject have to change password #readOnly#'
        passwordexpiresat:
          type: string
          readOnly: true
          description: 'Password expire date time. After this time subject must change password is still logon else should reset password to get a new one. #readOnly#'
        lastloginat:
          type: string
          readOnly: true
          description: 'Last login date time of subject #readOnly#'
        lastpasswordchangeat:
          type: string
          readOnly: true
          description: 'Last password change date time #readOnly#'
        lastauthenticatedat:
          type: string
          readOnly: true
          description: 'Last successful authentication date time #readOnly#'
        lastfailedloginat:
          type: string
          readOnly: true
          description: 'Last failed login attempt date time #readOnly#'
        subjectdirectoryid:
          type: string
          description: 'FK ID of Subject Directory'
        islocked:
          type: boolean
          description: 'Is Subject Locked / Disabled'
        issandbox:
          type: boolean
          description: 'Is Subject Sandbox'
        url:
          type: string
          description: 'Url / Web Site Address of Subject (User or APP)'
        isrestrictedtoprocessing:
          type: boolean
          description: 'Is Subject Data Restricted to Processing - GDPR Compliance'
        description:
          type: string
          description: Description of subject
        distinguishedname:
          type: string
          description: Distinguished Name stored in User Directory of the Subject
          nullable: true
        uniqueid:
          type: string
          description: Unique ID from User Directory
          nullable: true
        phonebusiness:
          type: string
          description: Business Phone Number
          nullable: true
        phonehome:
          type: string
          description: Home Phone Number
          nullable: true
        phonemobile:
          type: string
          description: Mobile Phone Number
          nullable: true
        phoneextension:
          type: string
          description: Phone Extension Number
          nullable: true
        jobtitle:
          type: string
          description: Job Title of Subject
          nullable: true
        department:
          type: string
          description: Department of Subject
          nullable: true
        company:
          type: string
          description: Company of Subject
          nullable: true
    UserWithOrganizations:
      allOf:
        - $ref: '#/components/schemas/Subject'
        - type: object
          properties:
            organizations:
              type: object
              properties:
                uuid:
                  type: string
                  readOnly: true
                  description: 'Secondary primary key. Used in front end messages for security reasons.'
                isdeleted:
                  type: boolean
                  readOnly: true
                  description: 'Is record logically deleted #readOnly#'
                name:
                  type: string
                  description: 'Name or alias of organization'
                description:
                  type: string
                  description: 'Description of organization'
                isactive:
                  type: boolean
                  readOnly: true
                  description: 'Is the organization active #readOnly#'
    SubjectWithGroups:
      allOf:
        - $ref: '#/components/schemas/Subject'
        - type: object
          properties:
            groups:
              type: object
              properties:
                uuid:
                  type: string
                  readOnly: true
                  description: 'Secondary primary key. Used in front end messages for security reasons.'
                isdeleted:
                  type: boolean
                  readOnly: true
                  description: 'Is record logically deleted #readOnly#'
                displayname:
                  type: string
                  description: 'Display name or alias of group'
                description:
                  type: string
                  description: 'Description of group'
    SubjectWithGroupsAndPermissions:
      allOf:
        - $ref: '#/components/schemas/SubjectWithGroups'
        - type: object
          properties:
            permissions:
              type: object
              properties:
                uuid:
                  type: string
                  readOnly: true
                  description: 'Secondary primary key. Used in front end messages for security reasons.'
                isdeleted:
                  type: boolean
                  readOnly: true
                  description: 'Is record logically deleted #readOnly#'
                permission:
                  type: string
                  readOnly: true
                  description: 'Permission of the subject'
                description:
                  type: string
                  readOnly: true
                  description: 'Description of permission'
                subjectid:
                  type: string
                  readOnly: true
                  description: 'ID of Subject owning the permission'
                resourceid:
                  type: string
                  readOnly: true
                  description: 'ID of Resource that the permission is permitted to act upon'
                resourceactionid:
                  type: string
                  readOnly: true
                  description: 'ID of Resource Action that the permission is given'
                isactive:
                  type: boolean
                  readOnly: true
                  description: 'Is the permission active #readOnly#'
    AppWithContracts:
      type: object
      properties:
        uuid:
          type: string
          readOnly: true
          description: 'Secondary primary key. Used in front end messages for security reasons.'
        organizationid:
          type: string
          description: 'FK ID of Organization'
        created:
          type: string
          readOnly: true
          description: 'Timestamp of creation #readOnly#'
        updated:
          type: string
          readOnly: true
          description: 'Timestamp of update #readOnly#'
        deleted:
          type: string
          readOnly: true
          description: 'Timestamp of deletion #readOnly#'
        isdeleted:
          type: boolean
          readOnly: true
          description: 'Is record logically deleted #readOnly#'
        isactivated:
          type: boolean
          readOnly: true
          description: 'Is user activated after signup by validating secondary verification mechanism #readOnly#'
        subjecttypeid:
          type: string
          description: 'Id of Subject Type'
        subjectname:
          type: string
          description: 'Username of user that is going to be used as credential'
        displayname:
          type: string
          description: 'Display name or alias of user'
        email:
          type: string
          format: email
          description: 'Main contact email of user #email#'
        effectivestartdate:
          type: string
          description: 'Effective start date time of user that he or she can start using the platform'
        effectiveenddate:
          type: string
          description: 'Effective end date time of user that he or she can use the platform until'
        subjectdirectoryid:
          type: string
          description: 'FK ID of Subject Directory'
        subjectdirectory:
          type: string
          description: 'Name of Subject Directory'
        islocked:
          type: boolean
          description: 'Is Subject Locked / Disabled'
        issandbox:
          type: boolean
          description: 'Is Subject Sandbox'
        url:
          type: string
          description: 'Url / Web Site Address of Subject (User or APP)'
        description:
          type: string
          description: Description of subject
        contracts:
          type: object
          properties:
            uuid:
              type: string
              readOnly: true
              description: 'Secondary primary key. Used in front end messages for security reasons.'
            organizationid:
              type: string
              description: 'FK ID of Organization'
            created:
              type: string
              readOnly: true
              description: 'Timestamp of creation #readOnly#'
            updated:
              type: string
              readOnly: true
              description: 'Timestamp of update #readOnly#'
            deleted:
              type: string
              readOnly: true
              description: 'Timestamp of deletion #readOnly#'
            isdeleted:
              type: boolean
              readOnly: true
              description: 'Is record logically deleted #readOnly#'
            name:
              type: string
              description: 'Name of contract'
            description:
              type: string
              description: 'The text description of the contract'
            apiid:
              type: string
              description: 'FK ID of API Version that this contract binds'
            environment:
              type: string
              description: 'Environment that the contract relates to (Sandbox or Production).'
            contractstateid:
              type: string
              description: 'FK ID of the current state of the contract.

    The state values for an API contract are

    pending_approval
    config_pending (used only in certain custom workflow scenarios or in LaaS integration)
    approved
    activated
    rejected
    resubmitted
    suspended
    cancelled'
            status:
              type: string
              description: 'The status of the contract.
    draft - Indicates the contract has not yet been activated. workflow status of Pending Approval, Approved, and any other state before the contract is activated will have this status value.
    inforce - Indicates that the contract is either Active or Suspended.
    archived - Indicates that the active life of the contract is over. The workflow status of Cancelled, adn any other action that results in the cancellation of the contract (such as deletion of the app or API) will have this status value'
            licenseid:
              type: string
              description: 'FK ID of license'
            subjectpermissionid:
              type: string
              description: 'FK ID of Subject Permission'
            tokens:
              type: object
              properties:
                uuid:
                  type: string
                  readOnly: true
                  description: 'Secondary primary key. Used in front end messages for security reasons.'
                organizationid:
                  type: string
                  description: 'Id of Organization'
                created:
                  type: string
                  readOnly: true
                  description: 'Timestamp of creation #readOnly#'
                updated:
                  type: string
                  readOnly: true
                  description: 'Timestamp of update #readOnly#'
                deleted:
                  type: string
                  readOnly: true
                  description: 'Timestamp of deletion #readOnly#'
                isdeleted:
                  type: boolean
                  readOnly: true
                  description: 'Is record logically deleted #readOnly#'
                token:
                  type: string
                  readOnly: true
                  description: 'Activation token'
                expiredate:
                  type: string
                  readOnly: true
                  description: 'Expire date of activation code'
                isactive:
                  type: boolean
                  description: 'Is Token Active'
    SubjectChangePassword:
      type: object
      properties:
        oldpassword:
          type: string
          writeOnly: true
          description: 'old password to be changed with new password'
        newpassword:
          type: string
          writeOnly: true
          description: 'requested new password'
        confirmpassword:
          type: string
          writeOnly: true
          description: 'confirm new password'
  requestBodies:
    Subject:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Subject'
      description: 'Subject object that needs to be added or updated'
      required: true
    ListOfSubject:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Subject'
      description: 'Subject array that needs to be added'
      required: true
    ListOfSubjectObject:
      content:
        application/json:
          schema:
            type: object
            additionalProperties: true
      description:  'list of Subject objects that needs to be updated, each additional property name should be the uuid of coresponding Subject record'
      required: true
    SubjectChangePassword:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SubjectChangePassword'
      description: 'Subject Change Password object that needs to update old password with new password'
      required: true
  responses:
    '200':
      description: 'Successful operation'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Subject'
    '200-SubjectWithGroupAndPermission':
      description: 'Successful operation'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SubjectWithGroupsAndPermissions'
    '200-ListOfSubject':
      description: 'A Subject array'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Subject'
    '200-ListOfSubjectWithGroups':
      description: 'A Subject with groups array'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/SubjectWithGroups'
    '200-AppWithContracts':
      description: 'Apps with contracts array'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AppWithContracts'
    '200-UserWithOrganizations':
      description: 'Users with Organizations'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserWithOrganizations'
    '201':
      description: 'New Subject resource has been created'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Subject'
    '204':
      description: 'The Subject resource was successfully deleted'
    '207':
      description: 'Multi Status for bulk operation'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/MultiStatus'
    '304':
      description: 'Not Modified – The client can use cached data'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Subject'
    '400':
      description: 'Invalid UUID supplied'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '401':
      description: 'Authorization information is missing or invalid'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '403':
      description: 'Forbidden – The server understood the request, but is refusing it or the access is not allowed'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '404':
      description: 'Not found – There is no resource behind the URI'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '405':
      description: 'Method not allowed'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '422':
      description: 'Unprocessable Entity – server cannot process the request'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '429':
      description: 'Too many request(rate limiting)'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    '500':
      description: 'Internal server error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    default:
      description: 'error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  parameters:
    offsetParam:
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
      description: 'The number of items to skip before starting to collect the result set'
    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 50
        default: 20
      description: 'The numbers of items to return'
  securitySchemes:
    abyssCookieAuth:
      $ref: '/openapi/AbyssSecuritySchemes.yaml#/securitySchemes/abyssCookieAuth'
    abyssHttpBasicAuth:
      $ref: '/openapi/AbyssSecuritySchemes.yaml#/securitySchemes/abyssHttpBasicAuth'
    abyssApiKeyAuth:
      $ref: '/openapi/AbyssSecuritySchemes.yaml#/securitySchemes/abyssApiKeyAuth'
    abyssJWTBearerAuth:
      $ref: '/openapi/AbyssSecuritySchemes.yaml#/securitySchemes/abyssJWTBearerAuth'
    abyssAppAccessTokenAuth:
      $ref: '/openapi/AbyssSecuritySchemes.yaml#/securitySchemes/abyssAppKeyAuth'
    abyssAppAccessTokenCookieAuth:
      $ref: '/openapi/AbyssSecuritySchemes.yaml#/securitySchemes/abyssAppKeyCookieAuth'
  links: {}
  callbacks: {}
security:
  - abyssCookieAuth: []
  - abyssHttpBasicAuth: []
  - abyssApiKeyAuth: []
  - abyssJWTBearerAuth: []
  - abyssAppAccessTokenAuth: []
  - abyssAppAccessTokenCookieAuth: []
